{"version":3,"sources":["Map.js","App.js","serviceWorker.js","index.js"],"names":["mapStyles","position","width","height","CurrentLocation","props","initialCenter","lat","lng","state","currentLocation","this","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","loadMap","prevProps","prevState","google","recenterMap","maps","mapRef","refs","map","node","ReactDOM","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","Map","current","panTo","children","React","Children","c","cloneElement","mapCenter","style","ref","renderChildren","Component","defaultProps","visible","coitTower","twinPeaks","MapContainer","showingInfoWindow","activeMarker","selectedPlace","jumptoCoitTower","curLocRef","jumptoTwinPeaks","onMarkerClick","marker","e","onClose","createRef","Container","Row","Col","onClick","name","Button","GoogleApiWrapper","apiKey","Boolean","window","location","hostname","match","render","StrictMode","App","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.860347a6.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nconst mapStyles = {\r\n  map: {\r\n    position: 'absolute',\r\n    width: '100%',\r\n    height: '80vh'\r\n  }\r\n};\r\n\r\n\r\nexport class CurrentLocation extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const { lat, lng } = this.props.initialCenter;\r\n    this.state = {\r\n      currentLocation: {\r\n        lat: lat,\r\n        lng: lng\r\n      }\r\n    };\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    if (this.props.centerAroundCurrentLocation) {\r\n      if (navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n          const coords = pos.coords;\r\n          this.setState({\r\n            currentLocation: {\r\n              lat: coords.latitude,\r\n              lng: coords.longitude\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n    this.loadMap();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.google !== this.props.google) {\r\n      this.loadMap();\r\n    }\r\n    if (prevState.currentLocation !== this.state.currentLocation) {\r\n      this.recenterMap();\r\n    }\r\n  }\r\n\r\n  loadMap() {\r\n    if (this.props && this.props.google) {\r\n      // checks if google is available\r\n      const { google } = this.props;\r\n      const maps = google.maps;\r\n\r\n      const mapRef = this.refs.map;\r\n\r\n      // reference to the actual DOM element\r\n      const node = ReactDOM.findDOMNode(mapRef);\r\n\r\n      let { zoom } = this.props;\r\n      const { lat, lng } = this.state.currentLocation;\r\n      const center = new maps.LatLng(lat, lng);\r\n      const mapConfig = Object.assign(\r\n        {},\r\n        {\r\n          center: center,\r\n          zoom: zoom\r\n        }\r\n      );\r\n\r\n      // maps.Map() is constructor that instantiates the map\r\n      this.map = new maps.Map(node, mapConfig);\r\n    }\r\n  }\r\n\r\n  recenterMap() {\r\n    const map = this.map;\r\n    const current = this.state.currentLocation;\r\n\r\n    const google = this.props.google;\r\n    const maps = google.maps;\r\n\r\n    if (map) {\r\n      let center = new maps.LatLng(current.lat, current.lng);\r\n      map.panTo(center);\r\n    }\r\n  }\r\n\r\n  renderChildren() {\r\n    const { children } = this.props;\r\n\r\n    if (!children) return;\r\n\r\n    return React.Children.map(children, c => {\r\n      if (!c) return;\r\n      return React.cloneElement(c, {\r\n        map: this.map,\r\n        google: this.props.google,\r\n        mapCenter: this.state.currentLocation\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const style = Object.assign({}, mapStyles.map);\r\n    return (\r\n      <div>\r\n        <div style={style} ref=\"map\">\r\n          Loading map...\r\n        </div>\r\n        {this.renderChildren()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default CurrentLocation;\r\n\r\nCurrentLocation.defaultProps = {\r\n  zoom: 14,\r\n  initialCenter: {\r\n    lat: 37.7749,\r\n    lng: -122.4194\r\n  },\r\n  centerAroundCurrentLocation: false,\r\n  visible: true\r\n};","import React, { Component } from 'react';\nimport { GoogleApiWrapper, InfoWindow, Marker } from 'google-maps-react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button'\n\n\nimport CurrentLocation from './Map';\n\nconst coitTower = {\n  currentLocation: {\n    lat: 37.8024,\n    lng: -122.4058\n  }\n}\n\nconst twinPeaks = {\n  currentLocation: {\n    lat: 37.7542,\n    lng: -122.4471\n  }\n}\n\n\nexport class MapContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.curLocRef = React.createRef();\n  }\n\n  state = {\n    showingInfoWindow: false,\n    activeMarker: {},\n    selectedPlace: {}\n  };\n\n  jumptoCoitTower = () => {\n    this.curLocRef.current.setState(coitTower)\n  }\n\n  jumptoTwinPeaks = () => {\n    this.curLocRef.current.setState(twinPeaks)\n  }\n\n  onMarkerClick = (props, marker, e) =>\n    this.setState({\n      selectedPlace: props,\n      activeMarker: marker,\n      showingInfoWindow: true\n    });\n\n  onClose = props => {\n    if (this.state.showingInfoWindow) {\n      this.setState({\n        showingInfoWindow: false,\n        activeMarker: null\n      });\n    }\n  };\n\n\n\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col>\n            <CurrentLocation\n              ref={this.curLocRef}\n              centerAroundCurrentLocation\n              google={this.props.google}\n            >\n              <Marker onClick={this.onMarkerClick} name={'current location'} />\n              <InfoWindow\n                marker={this.state.activeMarker}\n                visible={this.state.showingInfoWindow}\n                onClose={this.onClose}\n              >\n                <div>\n                  <h4>{this.state.selectedPlace.name}</h4>\n                </div>\n              </InfoWindow>\n            </CurrentLocation>\n          </Col>\n          <Col>\n\n            <p><Button onClick={this.jumptoCoitTower}>Jump to Coit Tower</Button></p>\n\n            <p><Button onClick={this.jumptoTwinPeaks}>Jump to Twin Peaks</Button></p>\n          </Col>\n        </Row>\n      </Container >\n    );\n  }\n}\n\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyAUFRV2Qv6kYtvjmASK8HOve2VBWRAc9N8'\n})(MapContainer);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}